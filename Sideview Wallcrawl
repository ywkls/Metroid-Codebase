ffc script Sideview_WallCrawl{
	bool WC_OnWall(int ClingDir, int CCW){
		if(CCW==0){
			if(ClingDir==DIR_UP){
				if(CanWalk(Ghost_X, Ghost_Y, ClingDir, 1, true)&&CanWalk(Ghost_X-16, Ghost_Y, ClingDir, 1, true))
					return false;
				else
					return true;
			}
			else if(ClingDir==DIR_DOWN){
				if(CanWalk(Ghost_X, Ghost_Y, ClingDir, 1, true)&&CanWalk(Ghost_X+16, Ghost_Y, ClingDir, 1, true))
					return false;
				else
					return true;
			}
			else if(ClingDir==DIR_LEFT){
				if(CanWalk(Ghost_X, Ghost_Y, ClingDir, 1, true)&&CanWalk(Ghost_X, Ghost_Y+16, ClingDir, 1, true))
					return false;
				else
					return true;
			}
			else if(ClingDir==DIR_RIGHT){
				if(CanWalk(Ghost_X, Ghost_Y, ClingDir, 1, true)&&CanWalk(Ghost_X, Ghost_Y-16, ClingDir, 1, true))
					return false;
				else
					return true;
			}
		}
		else{
			if(ClingDir==DIR_UP){
				if(CanWalk(Ghost_X, Ghost_Y, ClingDir, 1, true)&&CanWalk(Ghost_X+16, Ghost_Y, ClingDir, 1, true))
					return false;
				else
					return true;
			}
			else if(ClingDir==DIR_DOWN){
				if(CanWalk(Ghost_X, Ghost_Y, ClingDir, 1, true)&&CanWalk(Ghost_X-16, Ghost_Y, ClingDir, 1, true))
					return false;
				else
					return true;
			}
			else if(ClingDir==DIR_LEFT){
				if(CanWalk(Ghost_X, Ghost_Y, ClingDir, 1, true)&&CanWalk(Ghost_X, Ghost_Y-16, ClingDir, 1, true))
					return false;
				else
					return true;
			}
			else if(ClingDir==DIR_RIGHT){
				if(CanWalk(Ghost_X, Ghost_Y, ClingDir, 1, true)&&CanWalk(Ghost_X, Ghost_Y+16, ClingDir, 1, true))
					return false;
				else
					return true;
			}
		}
	}
	void run(int enemyid){
		npc ghost = Ghost_InitAutoGhost(this, enemyid);
		Ghost_SetFlag(GHF_STUN);
		Ghost_SetFlag(GHF_CLOCK);
		Ghost_SetFlag(GHF_4WAY);
		Ghost_SetFlag(GHF_NO_FALL);
		int CCW = ghost->Attributes[0]; //Whether or not the enemy goes counterclockwise
		if(ghost->Attributes[1]>=1) //0 = Don't move offscreen, 1 = Move offscreen, 2 = Move offscreen and die if offscreen
			Ghost_SetFlag(GHF_MOVE_OFFSCREEN);
		int Combo = ghost->Attributes[10];
		int ClingDir = -1;
		int FlashCounter;
		float FakeJump;
		int Width = Ghost_GetAttribute(ghost,2,1);
		int Height = Ghost_GetAttribute(ghost,3,1);
		Ghost_SetSize(this,ghost,Width,Height);
		for(int i=0; i<4; i++){
			if(Height>1){
				if(!Ghost_CanMove(OppositeDir(i), Height*16, 0)){
					ClingDir = OppositeDir(i);
					break;
				}
			}
			else{
				if(!Ghost_CanMove(OppositeDir(i), 1, 0)){
					ClingDir = OppositeDir(i);
					break;
				}
			}
		}
		while(true){
			if(Ghost_GotHit())FlashCounter = 32;
			else if(FlashCounter>0)FlashCounter--;
			if(ClingDir==-1){
				FakeJump = Min(FakeJump+GH_GRAVITY, GH_TERMINAL_VELOCITY);
				Ghost_MoveXY(0, FakeJump, 0);
				for(int i=0; i<4; i++){
					if(Height>1 || Width>1){
						if(!CanWalk(Ghost_X, Ghost_Y, OppositeDir(i), Height*16, true)){
							ClingDir = OppositeDir(i);
							break;
						}
					}
					else{
						if(!CanWalk(Ghost_X, Ghost_Y, OppositeDir(i), 1, true)){
							ClingDir = OppositeDir(i);
							break;
						}
					}
				}
			}
			else if(FlashCounter==0){
				float Step = ghost->Step/100;
				for(int i=0; i<Step; i++){
					if(CCW==0){
						if(!WC_OnWall(ClingDir, CCW)){
							ClingDir = -1;
							FakeJump = 0;
						}
						if(ClingDir==DIR_UP){
							Ghost_Dir = DIR_DOWN;
							Ghost_Move(DIR_LEFT, Min(1, Step), 0);
							if(Height>1 || Width>1){
								if(!Ghost_CanMove(DIR_LEFT, Width*16, 0))
									ClingDir = DIR_LEFT;
								else if(Ghost_CanMove(DIR_UP, Height*16, 0)){
									ClingDir = DIR_RIGHT;
									Ghost_Move(DIR_UP, 1, 0);
								}
							}
							else{
								if(!Ghost_CanMove(DIR_LEFT, 1, 0))
									ClingDir = DIR_LEFT;
								else if(Ghost_CanMove(DIR_UP, 1, 0)){
									ClingDir = DIR_RIGHT;
									Ghost_Move(DIR_UP, 1, 0);
								}
							}
						}
						else if(ClingDir==DIR_DOWN){
							Ghost_Dir = DIR_UP;
							Ghost_Move(DIR_RIGHT, Min(1, Step), 0);
							if(Height>1 || Width>1){
								if(!Ghost_CanMove(DIR_RIGHT, Width*16, 0))
									ClingDir = DIR_RIGHT;
								else if(Ghost_CanMove(DIR_DOWN, Height*16, 0)){
									ClingDir = DIR_LEFT;
									Ghost_Move(DIR_DOWN, 1, 0);
								}
							}
							else{
								if(!Ghost_CanMove(DIR_RIGHT, 1, 0))
									ClingDir = DIR_RIGHT;
								else if(Ghost_CanMove(DIR_DOWN, 1, 0)){
									ClingDir = DIR_LEFT;
									Ghost_Move(DIR_DOWN, 1, 0);
								}
							}
						}
						else if(ClingDir==DIR_LEFT){
							Ghost_Dir = DIR_RIGHT;
							Ghost_Move(DIR_DOWN, Min(1, Step), 0);
							if(Height>1 || Width>1){
								if(!Ghost_CanMove(DIR_DOWN, Height*16, 0))
									ClingDir = DIR_DOWN;
								else if(Ghost_CanMove(DIR_LEFT, Width*16, 0)){
									ClingDir = DIR_UP;
									Ghost_Move(DIR_LEFT, 1, 0);
								}
							}
							else{
								if(!Ghost_CanMove(DIR_DOWN, 1, 0))
									ClingDir = DIR_DOWN;
								else if(Ghost_CanMove(DIR_LEFT, 1, 0)){
									ClingDir = DIR_UP;
									Ghost_Move(DIR_LEFT, 1, 0);
								}
							}
						}
						else if(ClingDir==DIR_RIGHT){
							Ghost_Dir = DIR_LEFT;
							Ghost_Move(DIR_UP, Min(1, Step), 0);
							if(Height>1 || Width>1){
								if(!Ghost_CanMove(DIR_UP, Height*16, 0))
									ClingDir = DIR_UP;
								else if(Ghost_CanMove(DIR_RIGHT, Width*16, 0)){
									ClingDir = DIR_DOWN;
									Ghost_Move(DIR_RIGHT, 1, 0);
								}
							}
							else{
								if(!Ghost_CanMove(DIR_UP, 1, 0))
									ClingDir = DIR_UP;
								else if(Ghost_CanMove(DIR_RIGHT, 1, 0)){
									ClingDir = DIR_DOWN;
									Ghost_Move(DIR_RIGHT, 1, 0);
								}
							}
						}
					}
					else{
						if(!WC_OnWall(ClingDir, CCW)){
							ClingDir = -1;
							FakeJump = 0;
						}
						if(ClingDir==DIR_UP){
							Ghost_Dir = DIR_DOWN;
							Ghost_Move(DIR_RIGHT, Min(1, Step), 0);
							if(Height>1 || Width>1){
								if(!Ghost_CanMove(DIR_RIGHT, Width*16, 0))
									ClingDir = DIR_RIGHT;
								else if(Ghost_CanMove(DIR_UP, Height*16, 0)){
									ClingDir = DIR_LEFT;
									Ghost_Move(DIR_UP, 1, 0);
								}
							}
							else{
								if(!Ghost_CanMove(DIR_RIGHT, 1, 0))
									ClingDir = DIR_RIGHT;
								else if(Ghost_CanMove(DIR_UP, 1, 0)){
									ClingDir = DIR_LEFT;
									Ghost_Move(DIR_UP, 1, 0);
								}
							}
						}
						else if(ClingDir==DIR_DOWN){
							Ghost_Dir = DIR_UP;
							Ghost_Move(DIR_LEFT, Min(1, Step), 0);
							if(Height>1 || Width>1){
								if(!Ghost_CanMove(DIR_LEFT, Width*16, 0))
									ClingDir = DIR_LEFT;
								else if(Ghost_CanMove(DIR_DOWN, Height*16, 0)){
									ClingDir = DIR_RIGHT;
									Ghost_Move(DIR_DOWN, 1, 0);
								}
							}
							else{
								if(!Ghost_CanMove(DIR_LEFT, 1, 0))
									ClingDir = DIR_LEFT;
								else if(Ghost_CanMove(DIR_DOWN, 1, 0)){
									ClingDir = DIR_RIGHT;
									Ghost_Move(DIR_DOWN, 1, 0);
								}
							}
						}
						else if(ClingDir==DIR_LEFT){
							Ghost_Dir = DIR_RIGHT;
							Ghost_Move(DIR_UP, Min(1, Step), 0);
							if(Height>1 || Width>1){
								if(!Ghost_CanMove(DIR_UP, Height*16, 0))
									ClingDir = DIR_UP;
								else if(Ghost_CanMove(DIR_LEFT, Width*16, 0)){
									ClingDir = DIR_DOWN;
									Ghost_Move(DIR_LEFT, 1, 0);
								}
							}
							else{
								if(!Ghost_CanMove(DIR_UP, 1, 0))
									ClingDir = DIR_UP;
								else if(Ghost_CanMove(DIR_LEFT, 1, 0)){
									ClingDir = DIR_DOWN;
									Ghost_Move(DIR_LEFT, 1, 0);
								}
							}
						}
						else if(ClingDir==DIR_RIGHT){
							Ghost_Dir = DIR_LEFT;
							Ghost_Move(DIR_DOWN, Min(1, Step), 0);
							if(Height>1 || Width>1){
								if(!Ghost_CanMove(DIR_DOWN, Height*16, 0))
									ClingDir = DIR_DOWN;
								else if(Ghost_CanMove(DIR_RIGHT, Width*16, 0)){
									ClingDir = DIR_UP;
									Ghost_Move(DIR_RIGHT, 1, 0);
								}
							}
							else{
								if(!Ghost_CanMove(DIR_DOWN, 1, 0))
									ClingDir = DIR_DOWN;
								else if(Ghost_CanMove(DIR_RIGHT, 1, 0)){
									ClingDir = DIR_UP;
									Ghost_Move(DIR_RIGHT, 1, 0);
								}
							}
							
						}
					}
					Step--;
				}
			}
			if(ghost->Attributes[1]==2&&Ghost_X<=-16||Ghost_X>=256||Ghost_Y<=-16||Ghost_Y>=176){
				Ghost_HP = -1000;
			}
			Ghost_Waitframe(this, ghost);
		}
	}
}
