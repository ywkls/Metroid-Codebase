//Section 80. Kraid- Final Form

const int KRAID_LOWER_BACK = 1804;//Lower back combo.
const int KRAID_LOWER_BELLY = 1888;//Lower belly combo.
const int KRAID_FRONT_BELLY = 1844;//Front belly combo.
const int KRAID_FOOT = 1864;//Foot combo.
const int SPR_KRAID_SPIKE = 90;//Weapon sprite of spikes shot from belly.

//Kraid Lower Half

ffc script Kraid_Lower_Half{
	void run(int enemyID){
		//Set up enemy.
		npc ghost = Ghost_InitAutoGhost(this, enemyID);
		Ghost_SetFlag(GHF_IGNORE_ALL_TERRAIN);
		Ghost_SetFlag(GHF_NO_FALL);
		Ghost_SetFlag(GHF_FAKE_Z);
		int i;
		Ghost_Y = 0;
		if(SamusVars[KRAID_DRAWN_X]!=0)
			Ghost_X =SamusVars[KRAID_DRAWN_X]+128;
		else
			Ghost_X = 128;
		bool MovingLeft= ChooseBool();
		Ghost_CSet = 8;
		Ghost_SetSize(this,ghost,4,4);
		Ghost_AddCombo(KRAID_LOWER_BACK,64,0,5,9);
		Ghost_AddCombo(KRAID_LOWER_BELLY,0,64,4,5);
		Ghost_AddCombo(KRAID_FRONT_BELLY,-16,48,1,3);
		Ghost_AddCombo(KRAID_FOOT,-16,64,6,5);
		if(SamusVars[KRAID_DRAWN_COMBO]==0)	
			SamusVars[KRAID_DRAWN_COMBO]= 1845; 
		if(SamusVars[KRAID_HP]==9999)
			SamusVars[KRAID_HP]=Ghost_HP;
		else
			Ghost_HP = SamusVars[KRAID_HP];
		eweapon spike;
		int SpikeTimer = Rand(100,200);
		while(true){
			if(SpikeTimer<=0){
				spike = FireBigEWeapon(EW_SCRIPT1, Ghost_X, Ghost_Y+Choose(16,80), DegtoRad(180),150,ghost->WeaponDamage, SPR_KRAID_SPIKE,0, EWF_UNBLOCKABLE,3,2);
				SetEWeaponDeathEffect(spike,EWD_VANISH,0);
				SpikeTimer = Rand(100,200);
			}
			if(MovingLeft && Ghost_X>150){
				Ghost_X--;
				SamusVars[KRAID_DRAWN_X]--;
			}
			else if(MovingLeft && Ghost_X<=150)
				MovingLeft = false;
			else if(!MovingLeft && Ghost_X<200){
				Ghost_X++;
				SamusVars[KRAID_DRAWN_X]++;
			}
			else if(!MovingLeft && Ghost_X>=200)
				MovingLeft = true;
			SpikeTimer--;
			Gen_Explode_Waitframe(this,ghost);
		}
	}
}

const int KRAID_UPPER_TORSO = 1849;//Upper torso combo.
const int KRAID_HEAD_TOP = 1764;//Top of head combo.
const int KRAID_HEAD_BACK = 1775;//Back of head combo.
const int KRAID_CLAW_COMBO = 1941;//Claw combo.
const int KRAID_HIT_COMBO = 3452;//Kraid has been hit, combo.
const int KRAID_OPEN_COMBO = 3453;//Kraid opens his mouth combo.
const int KRAID_OPEN_TOP = 3454;//Top of head with mouth open.
const int KRAID_OPEN_BACK = 3455;//Back of head with mouth open.
const int KRAID_DRAWN_HIT = 3456;//Combo to use for drawing Kraid when hit.
const int KRAID_DRAWN_OPEN = 3457;//Combo to use for drawing Kraid when mouth open.
const int KRAID_FLYING_CLAW = 61;//Enemy id of flying claw.

//Kraid Top Half

ffc script Kraid_Top_Half{
	void run(int enemyID){
		//Set up enemy.
		npc ghost = Ghost_InitAutoGhost(this, enemyID);
		Ghost_SetFlag(GHF_IGNORE_ALL_TERRAIN);
		Ghost_SetFlag(GHF_NO_FALL);
		Ghost_SetFlag(GHF_FAKE_Z);
		int i;
		Ghost_Y = 48;
		if(SamusVars[KRAID_DRAWN_X]!=0)
			Ghost_X =SamusVars[KRAID_DRAWN_X]+176;
		else
			Ghost_X = 176;
		bool MovingLeft= ChooseBool();
		int OpenTimer= Rand(60,240);//How long to lower defenses.
		Ghost_CSet = 8;
		Ghost_SetSize(this,ghost,4,4);
		if(SamusVars[KRAID_DRAWN_COMBO]==0)	
			SamusVars[KRAID_DRAWN_COMBO]= 1845; 
		if(SamusVars[KRAID_HP]==9999)
			SamusVars[KRAID_HP]=Ghost_HP;
		else
			Ghost_HP = SamusVars[KRAID_HP];
		int combo = ghost->Attributes[10];
		bool Open;
		npc Flying_Claw;
		if(SamusVars[KRAID_DRAWN_COMBO]==1845)
			Ghost_Data = combo;
		else if(SamusVars[KRAID_DRAWN_COMBO]==KRAID_DRAWN_HIT)
			Ghost_Data = KRAID_HIT_COMBO;
		else if(SamusVars[KRAID_DRAWN_COMBO]==KRAID_DRAWN_OPEN)
			Ghost_Data = KRAID_OPEN_COMBO;
		if(Ghost_Data!=KRAID_OPEN_COMBO){
			Ghost_AddCombo(KRAID_UPPER_TORSO,-32,64,9,4);
			Ghost_AddCombo(KRAID_HEAD_TOP,16,-32,6,2);
			Ghost_AddCombo(KRAID_HEAD_BACK,64,0,3,4);
			Ghost_AddCombo(KRAID_CLAW_COMBO,-48,64,3,2);
			Ghost_SetAllDefenses(ghost,NPCDT_BLOCK);
			Open = false;
		}
		else{
			Ghost_AddCombo(KRAID_OPEN_TOP,48,-16,3,1);
			Ghost_AddCombo(KRAID_OPEN_BACK,64,0,3,4);	
			ghost->Defense[NPCD_ARROW] = NPCDT_NONE;
			ghost->Defense[NPCD_MAGIC] = NPCDT_NONE;
			Open = true;
		}
		if(NumNPCsOf(KRAID_FLYING_CLAW)<3){
			Flying_Claw = Screen->CreateNPC(KRAID_FLYING_CLAW);
			Flying_Claw->X = Rand(32,200);
			Flying_Claw->Y = Rand(32,100);
		}
		int ClawTimer;
		while(true){
			if(NumNPCsOf(KRAID_FLYING_CLAW)<3 && ClawTimer<=0){
				Flying_Claw = Screen->CreateNPC(KRAID_FLYING_CLAW);
				Flying_Claw->X = Rand(32,200);
				Flying_Claw->Y = Rand(32,100);
				ClawTimer = 120;
			}
			else if(NumNPCsOf(KRAID_FLYING_CLAW)<3 && ClawTimer>0)
				ClawTimer--;
			if(OpenTimer<0){
				if(!Open){
					//Change appearance.
					Ghost_Data = KRAID_HIT_COMBO;
					SamusVars[KRAID_DRAWN_COMBO]= KRAID_DRAWN_HIT;
					//Wait a bit.
					Gen_Leader_Waitframes(this,ghost,60);
					OpenTimer = 120;//Set up open timer.
					//Lower defenses.
					ghost->Defense[NPCD_ARROW] = NPCDT_NONE;
					ghost->Defense[NPCD_MAGIC] = NPCDT_NONE;
					Game->PlaySound(KRAID_ROAR_SFX);//Make a sound.
					Ghost_ClearCombos();
					Ghost_Data = KRAID_OPEN_COMBO;
					Ghost_AddCombo(KRAID_OPEN_TOP,48,-16,3,1);
					Ghost_AddCombo(KRAID_OPEN_BACK,64,0,3,4);
					Ghost_AddCombo(KRAID_UPPER_TORSO,-32,64,9,4);
					SamusVars[KRAID_DRAWN_COMBO]= KRAID_DRAWN_OPEN;
					Open = true;
				}
				else if(Open){
					//Restore defenses.
					Ghost_SetAllDefenses(ghost,NPCDT_BLOCK);
					//Restore appearance.
					Ghost_ClearCombos();
					Ghost_Data = combo;
					Ghost_AddCombo(KRAID_UPPER_TORSO,-32,64,9,4);
					Ghost_AddCombo(KRAID_HEAD_TOP,16,-32,6,2);
					Ghost_AddCombo(KRAID_HEAD_BACK,64,0,3,4);
					Ghost_AddCombo(KRAID_CLAW_COMBO,-48,64,3,2);
					SamusVars[KRAID_DRAWN_COMBO]= 1845;
					//It is no longer hit.
					OpenTimer= Rand(60,240);
					Open = false;
				}
			}
			if(MovingLeft && Ghost_X>150){
				Ghost_X--;
				SamusVars[KRAID_DRAWN_X]--;
			}
			else if(MovingLeft && Ghost_X<=150)
				MovingLeft = false;
			else if(!MovingLeft && Ghost_X<200){
				Ghost_X++;
				SamusVars[KRAID_DRAWN_X]++;
			}
			else if(!MovingLeft && Ghost_X>=200)
				MovingLeft = true;
			SamusVars[KRAID_HP]=Ghost_HP;
			OpenTimer--;
			Gen_Leader_Waitframe(this,ghost);
		}
	}
}

const int LARGE_KRAID_DMAP = 73;//Dmap where you fight Kraid.

void KraidFix(){
	if(Link->Action==LA_SCROLLING){
		if(SamusVars[SCROLL_DIR]==DIR_UP && SamusVars[SCROLL_COUNTER]<45 && SamusVars[SCROLL_COUNTER]>0)
		   SamusVars[KRAID_DRAWN_Y]+=4;

	   else if(SamusVars[SCROLL_DIR]==DIR_DOWN && SamusVars[SCROLL_COUNTER]<45 && SamusVars[SCROLL_COUNTER]>0)
		  SamusVars[KRAID_DRAWN_Y]-=4;
	}
}

void RunKraid(int Layers){
   for(int i = 0;i<175;i++){
		Screen->FastCombo(3,ComboX(i)+SamusVars[KRAID_DRAWN_X],
							ComboY(i)+SamusVars[KRAID_DRAWN_Y]-176,Layers[i+352],8,128);
		Screen->FastCombo(4,ComboX(i)+SamusVars[KRAID_DRAWN_X],
							ComboY(i)+SamusVars[KRAID_DRAWN_Y]-176,Layers[i+528],8,128);
		Screen->FastCombo(3,ComboX(i)+SamusVars[KRAID_DRAWN_X],
							ComboY(i)+SamusVars[KRAID_DRAWN_Y],Layers[i],8,128);
		Screen->FastCombo(4,ComboX(i)+SamusVars[KRAID_DRAWN_X],
							ComboY(i)+SamusVars[KRAID_DRAWN_Y],Layers[i+176],8,128);
   }
	Screen->DrawCombo(3,SamusVars[KRAID_DRAWN_X]+176,SamusVars[KRAID_DRAWN_Y]-160,
						SamusVars[KRAID_DRAWN_COMBO],7,6,8,-1, -1, 0, 0, 0, -1, 0, true, 128);
	Screen->DrawCombo(3,SamusVars[KRAID_DRAWN_X]+220,SamusVars[KRAID_DRAWN_Y]-128,
						KRAID_HEAD_BACK-1,5,17,8,-1, -1, 0, 0, 0, -1, 0, true, 128);
}

void ResetKraid(){
	SamusVars[KRAID_DRAWN_Y]= 0;
	SamusVars[KRAID_DRAWN_X]= 0;
	SamusVars[KRAID_HP]= 9999;
	SamusVars[KRAID_DRAWN_COMBO]=0;
}
