//Section 68. Hybrid Queen

//Hybrid Metroid Queen

//Head Closed- 2 x 3
//Head Open- 3 x 3
//Body-5 x 6
//Neck- 1 x 1
//Wings- 7 x 4

const int HEAD_OPEN_TILE = 13663;
const int HEAD_CLOSED_TILE = 13660;
const int HYBRID_NECK_ID =37;
const int HYBRID_HEAD_ID = 179;
const int WING_LEFT_COMBO = 2917;
const int HYBRID_BODY_COMBO = 2886;

ffc script Hybrid_Queen{
	void run(int enemyID){
		npc ghost = Ghost_InitAutoGhost(this, enemyID);
		Ghost_SetSize(this,ghost,4,4);
		npc neck[4];
		int i;//Iterative variable.
		Ghost_X =32;
		Ghost_Y = 48;
		float angle;
		npc head = Screen->CreateNPC(HYBRID_HEAD_ID);
		Enemy_ExtendSimple(head,3,2);
		head->X = 96;
		head->Y = 32;
		int CalcX;
		int CalcY;
		//The aforementioned calculations.
		CalcY = (Abs((Ghost_Y-16)-(head->Y+16)))/4;
		CalcX = (Abs((Ghost_X+16)-head->X))/4;
		//Create and position the neck.
		for(i=0;i<=3;i++){
			neck[i] = Screen->CreateNPC(HYBRID_NECK_ID);
			neck[i]->X = (Ghost_X+16)+(i*CalcX);
			neck[i]->Y = (Ghost_Y-16)+(CalcY*i);
		}
		Ghost_AddCombo(HYBRID_BODY_COMBO,-16,-32,1,5);
		Ghost_AddCombo(HYBRID_BODY_COMBO+1,0,-32,4,2);
		Screen->DrawCombo(6, Ghost_X-80, Ghost_Y-48, WING_LEFT_COMBO, 7, 4, 10, 
						  -1, -1, 0, 0, 0, -1, 0, true, 128);			
		Screen->DrawCombo(6, Ghost_X-80, Ghost_Y, WING_LEFT_COMBO+1, 7, 4, 10, 
						  -1, -1, 0, 0, 0, -1, 0, true, 128);
		int Mode = Choose(1,2,3);
		int ModeTimer = Rand(120,240);
		int BiteChance;
		int step = ghost->Step/100;
		bool Biting = false;
		int color;
		int wait;
		eweapon fireball;
		Ghost_SetFlag(GHF_IGNORE_ALL_TERRAIN);
		Ghost_SetFlag(GHF_IGNORE_NO_ENEMY);
		Ghost_SetFlag(GHF_NO_FALL);
		int targetX;
		int targetY;
		int direction;
		float SavedAngle;
		while(true){
			Ghost_ForceDir(DIR_RIGHT);
			if(ModeTimer<0){
				ModeTimer = Rand(120,240);
				if(Mode==1)
					Mode = Choose(2,3);
				else if(Mode ==2)
					Mode = Choose(1,3);
				else
					Mode = Choose(1,2);
			}
			if(Mode==1){
				if(BiteChance==0){
					Biting = true;
					head->OriginalTile = HEAD_OPEN_TILE;
					Enemy_ExtendSimple(head,3,3);
					ghost->Defense[NPCD_ARROW]=NPCDT_NONE;
					ghost->Defense[NPCD_MAGIC]=NPCDT_NONE;
					ghost->Defense[NPCD_BEAM]=NPCDT_QUARTERDAMAGE;
					targetX = Link->X+8;
					targetY = Link->Y+8;
					while(Biting){
						Ghost_ForceDir(DIR_RIGHT);
						if(Distance(head->X,head->Y,targetX,targetY)>8){
							if(head->X<targetX)
								head->X++;
							else
								head->X--;
							if(head->Y<targetY)
								head->Y++;
							else
								head->Y--;
						}
						else if(Distance(head->X,head->Y,targetX,targetY)<=8){
							Biting = false;
							head->OriginalTile = HEAD_CLOSED_TILE;
							Enemy_ExtendSimple(head,3,2);
							Ghost_SetAllDefenses(ghost, NPCDT_BLOCK);
						}
						//The aforementioned calculations.
						CalcY = (Abs((Ghost_Y-16)-(head->Y+16)))/4;
						CalcX = (Abs((Ghost_X+16)-head->X))/4;
						//Create and position the neck.
						for(i=0;i<=3;i++){
							neck[i]->X = (Ghost_X+16)+(i*CalcX);
							neck[i]->Y = (Ghost_Y-16)+(CalcY*i);
						}
						Hybrid_Waitframe(this,ghost);
					}
					while(Distance(head->X,head->Y,Ghost_X+64,Ghost_Y-16)>0){
						Ghost_ForceDir(DIR_RIGHT);
						if(head->X<(Ghost_X+64))
							head->X++;
						else
							head->X--;
						if(head->Y<(Ghost_Y-16))
							head->Y++;
						else
							head->Y--;
						//The aforementioned calculations.
						CalcY = (Abs((Ghost_Y-16)-(head->Y+16)))/4;
						CalcX = (Abs((Ghost_X+16)-head->X))/4;
						//Create and position the neck.
						for(i=0;i<=3;i++){
							neck[i]->X = (Ghost_X+16)+(i*CalcX);
							neck[i]->Y = (Ghost_Y-16)+(CalcY*i);
						}
						Hybrid_Waitframe(this,ghost);
					}
				}
				BiteChance = (BiteChance+1)%90;
			}
			else if(Mode==2){
				//The aforementioned calculations.
				CalcY = (Abs((Ghost_Y-16)-(head->Y+16)))/4;
				CalcX = (Abs((Ghost_X+16)-head->X))/4;
				//Create and position the neck.
				for(i=0;i<=3;i++){
					neck[i]->X = (Ghost_X+16)+(i*CalcX);
					neck[i]->Y = (Ghost_Y-16)+(CalcY*i);
				}
				if(BiteChance==0){
					head->OriginalTile = HEAD_OPEN_TILE;
					EnemyResize(head,3,3);
					ghost->Defense[NPCD_ARROW]=NPCDT_NONE;
					ghost->Defense[NPCD_MAGIC]=NPCDT_NONE;
					ghost->Defense[NPCD_BEAM]=NPCDT_QUARTERDAMAGE;
					angle =  Angle(head->X+ 48, head->Y + 24, Link->X + 8, Link->Y + 8);
					wait = 120;
					direction = Choose(1,-1);
					SavedAngle = angle;
					while(wait>0){
						Ghost_ForceDir(DIR_RIGHT);
						color= (color +1)%60;
						if(direction ==1 && angle <=(SavedAngle+45))
							angle = (angle+direction)%360;
						else if(direction ==1 && angle >=(SavedAngle+45))
							direction = -1;
						if(direction ==-1 && angle >=(SavedAngle-45))
							angle = (angle+direction)%360;
						else if(direction ==-1 && angle <=(SavedAngle-45))
							direction = 1;	
						Laser(2, (head->X + 48) + 1 * Cos(angle),
							 (head->Y + 24) + 1 * Sin(angle), 8, angle,
							 ghost->WeaponDamage, color);      
						//Reduce timers.
						wait--;
						//The aforementioned calculations.
						CalcY = (Abs((Ghost_Y-16)-(head->Y+16)))/4;
						CalcX = (Abs((Ghost_X+16)-head->X))/4;
						//Create and position the neck.
						for(i=0;i<=3;i++){
							neck[i]->X = (Ghost_X+16)+(i*CalcX);
							neck[i]->Y = (Ghost_Y-16)+(CalcY*i);
						}
						Hybrid_Waitframe(this,ghost);
					}
					head->OriginalTile = HEAD_CLOSED_TILE;
					EnemyResize(head,3,2);
					Ghost_SetAllDefenses(ghost, NPCDT_BLOCK);
				}
				BiteChance = (BiteChance+1)%90;
			}
			else if(Mode==3){
				//The aforementioned calculations.
				CalcY = (Abs((Ghost_Y-16)-(head->Y+16)))/4;
				CalcX = (Abs((Ghost_X+16)-head->X))/4;
				//Create and position the neck.
				for(i=0;i<=3;i++){
					neck[i]->X = (Ghost_X+16)+(i*CalcX);
					neck[i]->Y = (Ghost_Y-16)+(CalcY*i);
				}
				if(BiteChance==0){
					for(i=0;i<=9;i++){
						fireball =  FireAimedEWeapon(ghost->Weapon, (Ghost_X+Rand(48,96)), 
													(Ghost_Y+Rand(48,96)), 0, 200, 
													ghost->WeaponDamage, -1, -1, 0);
					}
				}
				BiteChance = (BiteChance+1)%90;
			}
			ModeTimer--;
			Hybrid_Waitframe(this,ghost);
		}
	}
	void Hybrid_Waitframe(ffc this,npc ghost){
		Screen->DrawCombo(6, Ghost_X-80, Ghost_Y-48, WING_LEFT_COMBO, 7, 4, 10, 
						  -1, -1, 0, 0, 0, -1, 0, true, 128);			
		Screen->DrawCombo(6, Ghost_X-80, Ghost_Y, WING_LEFT_COMBO+1, 7, 4, 10, 
						  -1, -1, 0, 0, 0, -1, 0, true, 128);
		if(!Ghost_Waitframe(this,ghost,false,false)){
		   Ghost_DeathAnimation(this, ghost, 2);
		   for(int i =Screen->NumNPCs();i>0;i--){
				npc n = Screen->LoadNPC(i);
				n->HP = 0;
		   }
			Quit();
		}
     }
}
