//Section 10. Grapple Beam Script Components. Created by Moosh, modified by me.

//Converts a direction to an angle
int DirAngle(int Dir){
	if(Dir==DIR_UP)return -90;
	else if(Dir==DIR_DOWN)return 90;
	else if(Dir==DIR_LEFT)return 180;
	else if(Dir==DIR_RIGHT)return 0;
	else if(Dir==DIR_LEFTUP)return -135;
	else if(Dir==DIR_RIGHTUP)return -45;
	else if(Dir==DIR_LEFTDOWN)return 135;
	else if(Dir==DIR_RIGHTDOWN)return 45;
}

//Used by ForcePos function.

float ForcePosX;
float ForcePosY;

//Matches Link's position to coordinates.

void ForcePos(){
	if(ForcePosX>-1000)
		Link->X = ForcePosX;
	if(ForcePosY>-1000)
		Link->Y = ForcePosY;
}

const int I_GRAPPLE = 52;//Item ID for grapple beam.
const int CT_GRAPPLE = 144;//Combo type used as grapple point.
const int TIL_GRAPPLEHOOK = 940;//First tile of grapple beam.
const int CS_GRAPPLEHOOK = 1;//Cset of grapple beam.
const int FREQ_GRAPPLESOUND = 4;//How often to play grapple sound.
const int SFX_GRAPPLESOUND = 17;//What sound to play when using grapple.

//Play a sound every so often.

int TimedSFX(int timer, int sfx, int freq){
	timer++;
	if(timer>=freq){
		Game->PlaySound(sfx);
		timer = 0;
	}
	return timer;
}

//Grapple Beam Script. Created by Moosh, modified by me.

const int GRAPPLE_BEAM_SCRIPT = 23;//Script of grapple beam.
const int GRAPPLE_FFC = 121;//Ffc Script you can grapple onto.

void RunGrappleBeam(){
	if(CountFFCsRunning(GRAPPLE_BEAM_SCRIPT)==0 && !SamusVars[GRAPPLE_GRIP_ON]){
		int Args[8]= {160};
		NewFFCScript(GRAPPLE_BEAM_SCRIPT, Args);
	}
}

ffc script GrappleBeam{
	int HookX(int dir){
		if(dir==DIR_LEFT)
			return -16;
		else if(dir==DIR_LEFTUP||dir==DIR_LEFTDOWN)
			return -12;
		else if(dir==DIR_RIGHT)
			return 16;
		else if(dir==DIR_RIGHTUP||dir==DIR_RIGHTDOWN)
			return 12;
		else
			return 0;
	}
	int HookY(int dir){
		if(dir==DIR_UP||dir==DIR_LEFTUP||dir==DIR_RIGHTUP)
			return -16;
		else if(dir==DIR_LEFTUP||dir==DIR_RIGHTUP)
			return -16;
		else if(dir==DIR_DOWN)
			return 16;
		else if(dir==DIR_LEFTDOWN||dir==DIR_RIGHTDOWN)
			return 12;
		else
			return -8;
	}
	bool CanPlaceLink(int X, int Y){
		for(int x=0; x<3; x++){
			for(int y=0; y<3; y++){
				if(Screen->isSolid(X+x*7.5, Y+y*7.5))
					return false;
			}
		}
		return true;
	}
	int GrappleDetect(int X, int Y){
		for(int i=1; i<=32; i++){
			ffc f = Screen->LoadFFC(i);
			if(f->Script==GRAPPLE_FFC&&SquareCollision(X+4, Y+4, 8, f->X+4, f->Y+4, 8)
				&&!f->Flags[FFCF_CHANGER]){
				return -1-i;
			}
		}
		if(Screen->ComboT[ComboAt(X+4, Y+4)]==CT_GRAPPLE)
			return ComboAt(X+4, Y+4);
		else if(Screen->ComboT[ComboAt(X+12, Y+4)]==CT_GRAPPLE)
			return ComboAt(X+12, Y+4);
		else if(Screen->ComboT[ComboAt(X+4, Y+12)]==CT_GRAPPLE)
			return ComboAt(X+4, Y+12);
		else if(Screen->ComboT[ComboAt(X+12, Y+12)]==CT_GRAPPLE)
			return ComboAt(X+12, Y+12);
		return -1;
	}
	bool GrappleSolid(int X, int Y){
		if(Screen->isSolid(X+4, Y+4)||
			Screen->isSolid(X+12, Y+4)||
			Screen->isSolid(X+4, Y+12)||
			Screen->isSolid(X+12, Y+12))
			return true;
		return false;
	}
	void run(int Max_Length){
		this->Data = GH_INVISIBLE_COMBO;
		int OldJump = Link->Jump;
		Game->PlaySound(SFX_GRAPPLESOUND);
		bool Grapple;
		bool MovingGrapple;
		ffc GrappleFFC;
		int Length;
		int LinkX = Link->X;
		int LinkY = Link->Y;
		int HookStartX = Link->X+HookX(Link->Dir);
		int HookStartY = Link->Y+HookY(Link->Dir);
		int HookX = HookStartX;
		int HookY = HookStartY;
		int HookAngle = DirAngle(Link->Dir);
		int SFXTimer = 0;
		lweapon Damage = CreateLWeaponAt(LW_SCRIPT2, HookX, HookY);
		Damage->Step = 0;
		Damage->DrawYOffset = -1000;
		Damage->Damage = 1;
		Damage->Dir = Link->Dir;
		SetLWeaponFlag(Damage,__LWFI_IS_LWZH_LWPN);
		SetLWeaponFlag(Damage,LWF_ITEM_PICKUP);
		SetLWeaponFlag(Damage,LWF_INSTA_DELIVER);
		SetLWeaponFlag(Damage,LWF_ZERO_G);
		int GrappleTimer;
		this->TileWidth = 1;
		this->TileHeight = 1;
		while(Length<Max_Length && !SamusVars[GRAPPLE_GRIP_ON]){
			Length+=4;
			HookStartX = Link->X+HookX(Link->Dir);
			HookStartY = Link->Y+HookY(Link->Dir);
			HookX += VectorX(4, HookAngle);
			HookY += VectorY(4, HookAngle);
			for(int i=0; i<Ceiling(Length/8); i++){
				Screen->FastTile(2, HookX+VectorX(8*i, HookAngle-180), HookY+VectorY(8*i, HookAngle-180), TIL_GRAPPLEHOOK+8, CS_GRAPPLEHOOK, 128);
			}
			Screen->DrawTile(2, HookX, HookY, TIL_GRAPPLEHOOK+9, 1, 1, CS_GRAPPLEHOOK, -1, -1, HookX, HookY, HookAngle, 0, true, 128);
			Link->X = LinkX;
			Link->Y = LinkY;
			Link->Jump = 0;
			Screen->FastTile(2, HookStartX, HookStartY, TIL_GRAPPLEHOOK+Link->Dir, CS_GRAPPLEHOOK, 128);
			if(GrappleDetect(HookX, HookY)!=-1){	
				if(GrappleDetect(HookX, HookY)<-1){
					MovingGrapple = true;
					GrappleFFC = Screen->LoadFFC(-GrappleDetect(HookX, HookY)-1);
					HookX = GrappleFFC->X+(8*(GrappleFFC->TileWidth-1));
					HookY = GrappleFFC->Y+(8*(GrappleFFC->TileHeight-1));
				}
				else if(GrappleDetect(HookX, HookY)>-1){
					HookX = ComboX(GrappleDetect(HookX, HookY));
					HookY = ComboY(GrappleDetect(HookX, HookY));
					Grapple = true;
					if(ComboFI(HookX,HookY,CF_DASH))
						GrappleTimer = 240;
				}
				break;
			}
			else if(GrappleSolid(HookX, HookY)||!InputFire()
					||HookX<0||HookX>240||HookY<0||HookY>160||!Damage->isValid())
				break;
			SFXTimer = TimedSFX(SFXTimer, SFX_GRAPPLESOUND, FREQ_GRAPPLESOUND);
			if(Damage->isValid()){
				Damage->Dir = Link->Dir;
				Damage->X = HookX;
				Damage->Y = HookY;
			}
			WaitNoAction();
		}
		if(Damage->isValid())
			Damage->DeadState = 0;
		if((Grapple||MovingGrapple) && !SamusVars[GRAPPLE_GRIP_ON]){
			int LinkAngle = Angle(Link->X, Link->Y, HookX, HookY);
			int VAng;
			int Dist = Distance(Link->X, Link->Y, HookX, HookY);
			int VDist;
			int VY;
			if(ForcePosX==-1000&&ForcePosY==-1000){
				while(InputFire()&& !SamusVars[GRAPPLE_GRIP_ON]){
					if(MovingGrapple){
						HookX = GrappleFFC->X+(8*(GrappleFFC->TileWidth-1));
						HookY = GrappleFFC->Y+(8*(GrappleFFC->TileHeight-1));
					}
					HookStartX = Link->X+HookX(AngleDir8(LinkAngle));
					HookStartY = Link->Y+HookY(AngleDir8(LinkAngle));
					HookAngle = Angle(HookStartX, HookStartY, HookX, HookY);
					for(int i=0; i<Ceiling(Distance(HookStartX, HookStartY, HookX, HookY)/8); i++){
						Screen->FastTile(2, HookX+VectorX(8*i, LinkAngle-180), HookY+VectorY(8*i, LinkAngle-180), TIL_GRAPPLEHOOK+8, CS_GRAPPLEHOOK, 128);
					}
					Screen->DrawTile(2, HookX, HookY, TIL_GRAPPLEHOOK+9, 1, 1, CS_GRAPPLEHOOK, -1, -1, HookX, HookY, LinkAngle, 0, true, 128);
					if(LinkAngle>90||LinkAngle<-90){
						Link->Dir = DIR_LEFT;
						if(VAng<GH_TERMINAL_VELOCITY)
							VAng += GH_GRAVITY;
					}
					else if(LinkAngle>-90&&LinkAngle<90){
						if(VAng>-GH_TERMINAL_VELOCITY)
							VAng -= GH_GRAVITY;
						Link->Dir = DIR_RIGHT;
					}
					if(Link->Dir==DIR_UP||Link->Dir==DIR_DOWN)
						Link->Dir = DIR_LEFT;
					if(Xor(Link->InputLeft, Link->InputRight)){
						if(Link->InputLeft){
							if(VAng<GH_TERMINAL_VELOCITY*2)
								VAng += 0.08;
						}
						else if(Link->InputRight){
							if(VAng>-GH_TERMINAL_VELOCITY*2)
								VAng -= 0.08;
						}
					}
					if(!CanPlaceLink(HookX+VectorX(Dist, LinkAngle+180+VAng), HookY+VectorY(Dist, LinkAngle+180+VAng)))
						VAng = -VAng/2;
					VDist = Clamp(VDist-Sign(VDist)*0.01, -1, 1);
					if(Xor(Link->InputUp, Link->InputDown)){
						if(Link->InputUp)
							VDist = Clamp(VDist-0.1, -1, 1);
						else if(Link->InputDown)
							VDist = Clamp(VDist+0.1, -1, 1);
					}
					if(!CanPlaceLink(HookX+VectorX(Dist+VDist, LinkAngle+180), HookY+VectorY(Dist+VDist, LinkAngle+180)))
						VDist = -VDist;
					float OldY = HookY+VectorY(Dist, LinkAngle+180);
					LinkAngle = WrapDegrees(LinkAngle+VAng);
					Dist = Clamp(Dist+VDist, 24, 96);
					Link->X = HookX+VectorX(Dist, LinkAngle+180);
					Link->Y = HookY+VectorY(Dist, LinkAngle+180);
					VY = HookY+VectorY(Dist, LinkAngle+180)-OldY;
					Link->Jump = 0;
					Screen->FastTile(2, HookStartX, HookStartY, TIL_GRAPPLEHOOK+AngleDir8(LinkAngle), CS_GRAPPLEHOOK, 128);
					if(isGRGrip(Link->X+24,Link->Y-8) ||isGRGrip(Link->X-8,Link->Y-8)){
						SamusVars[GRAPPLE_GRIP_ON]= 1;
						break;
					}
					if(GrappleTimer>0)
						GrappleTimer--;
					if(GrappleTimer==5){
						Screen->ComboD[ComboAt(HookX,HookY)]=GH_INVISIBLE_COMBO;
						Game->PlaySound(SFX_STEPCOMBO);
						Grapple = false;
						if(MovingGrapple)
							MovingGrapple = false;
						break;
					}
					WaitNoAction();
				}
				int Step = Abs(VAng)*1.5*(Dist/64);
				if(VAng<0){
					SamusVars[GRAPPLE_VX] = VectorX(Step, LinkAngle+60);//Link->X-LastX;
					SamusVars[GRAPPLE_VY] = VectorY(Step, LinkAngle+60);//Link->Y-LastY;
				}
				else if(VAng>0){
					SamusVars[GRAPPLE_VX] = VectorX(Step, LinkAngle-60);//Link->X-LastX;
					SamusVars[GRAPPLE_VY] = VectorY(Step, LinkAngle-60);//Link->Y-LastY;
				}
			}
		}
		else{
			if(OldJump>0)
				OldJump = -OldJump;
			Link->Jump = OldJump;
		}
		while(Distance(HookStartX, HookStartY, HookX, HookY)>8 
				&& !SamusVars[GRAPPLE_GRIP_ON]){
			HookStartX = Link->X+HookX(Link->Dir);
			HookStartY = Link->Y+HookY(Link->Dir);
			HookAngle = Angle(HookStartX, HookStartY, HookX, HookY);
			HookX += VectorX(8, HookAngle-180);
			HookY += VectorY(8, HookAngle-180);
			for(int i=0; i<Ceiling(Distance(HookStartX, HookStartY, HookX, HookY)/8); i++){
				Screen->FastTile(2, HookX+VectorX(8*i, HookAngle-180), HookY+VectorY(8*i, HookAngle-180), TIL_GRAPPLEHOOK+8, CS_GRAPPLEHOOK, 128);
			}
			Screen->DrawTile(2, HookX, HookY, TIL_GRAPPLEHOOK+9, 1, 1, CS_GRAPPLEHOOK, -1, -1, HookX, HookY, HookAngle, 0, true, 128);
			Screen->FastTile(2, HookStartX, HookStartY, TIL_GRAPPLEHOOK+Link->Dir, CS_GRAPPLEHOOK, 128);
			SFXTimer = TimedSFX(SFXTimer, SFX_GRAPPLESOUND, FREQ_GRAPPLESOUND);
			Link->InputUp = false;
			Link->InputDown = false;
			DampInput(SamusVars[FIRE_BUTTON]);
			DampInput(SamusVars[JUMP_BUTTON]);
			if(isGRGrip(Link->X+24,Link->Y-8) ||isGRGrip(Link->X-8,Link->Y-8)){
				SamusVars[GRAPPLE_GRIP_ON]= 1;
				break;
			}
			if(GrappleTimer>0)
				GrappleTimer--;
			if(GrappleTimer==5){
				Screen->ComboD[ComboAt(HookX,HookY)]=GH_INVISIBLE_COMBO;
				Game->PlaySound(SFX_STEPCOMBO);
				if(MovingGrapple)
					MovingGrapple = false;
				break;
			}
			Waitframe();
		}
		if(MovingGrapple)
			MovingGrapple = false;
	}
}

void GrappleVelocity(){
	SamusVars[PUSH_X] += SamusVars[GRAPPLE_VX];
	SamusVars[PUSH_Y] += SamusVars[GRAPPLE_VY];
	if(SamusVars[GRAPPLE_VY]<0)
		Link->Jump = 0;
	if(SamusVars[GRAPPLE_VX]>0){
		SamusVars[GRAPPLE_VX] = Max(SamusVars[GRAPPLE_VX]-0.16, 0);
	}
	else if(SamusVars[GRAPPLE_VX]<0){
		SamusVars[GRAPPLE_VX] = Min(SamusVars[GRAPPLE_VX]+0.16, 0);
	}
	if(SamusVars[GRAPPLE_VY]>0){
		SamusVars[GRAPPLE_VY] = Max(SamusVars[GRAPPLE_VY]-0.16, 0);
	}
	else if(SamusVars[GRAPPLE_VY]<0){
		SamusVars[GRAPPLE_VY] = Min(SamusVars[GRAPPLE_VY]+0.16, 0);
	}
	if(OnGround()){
		SamusVars[GRAPPLE_VX] = 0;
		SamusVars[GRAPPLE_VY] = 0;
	}
}

const int MAX_PUSH = 4;

void Push(){
	for(int i=0; i<MAX_PUSH&&SamusVars[PUSH_X]<=-1; i++){
		if(CanWalkOnEdgeBig(Link->X, Link->Y, DIR_LEFT, 1, false,8,16)){
			Link->X--;
			SamusVars[PUSH_X]++;
		}
		else{
			SamusVars[PUSH_X] = 0;
		}
	}
	for(int i=0; i<MAX_PUSH&&SamusVars[PUSH_X]>=1; i++){
		if(CanWalkOnEdgeBig(Link->X, Link->Y, DIR_RIGHT, 1, false,8,16)){
			Link->X++;
			SamusVars[PUSH_X]--;
		}
		else{
			SamusVars[PUSH_X] = 0;
		}
	}
	for(int i=0; i<MAX_PUSH&&SamusVars[PUSH_Y]<=-1; i++){
		if(CanWalkOnEdgeBig(Link->X, Link->Y-16, DIR_UP, 1, true,8,16)){
			Link->Y--;
			SamusVars[PUSH_Y]++;
		}
		else{
			SamusVars[PUSH_Y] = 0;
		}
	}
	for(int i=0; i<MAX_PUSH&&SamusVars[PUSH_Y]>=1; i++){
		if(CanWalkOnEdgeBig(Link->X, Link->Y, DIR_DOWN, 1, false,8,16)){
			Link->Y++;
			SamusVars[PUSH_Y]--;
		}
		else{
			SamusVars[PUSH_Y] = 0;
		}
	}
}
